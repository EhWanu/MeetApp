{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberofEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showMore","this","setState","event","description","props","className","summary","creator","email","start","dateTime","location","desc","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","type","onChange","suggestion","NumberofEvents","useState","eventsToShow","setEventsToShow","htmlFor","placeholder","updateEventNum","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qOA6CeA,E,4MAxCbC,MAAQ,CACNC,UAAU,G,8CAGZ,YAC6B,IAAxBC,KAAKF,MAAMC,SACZC,KAAKC,SAAS,CAACF,UAAU,IAEzBC,KAAKC,SAAS,CAACF,UAAS,M,kBAI5B,SAAKG,GACH,OAA2B,IAAxBF,KAAKF,MAAMC,SACN,GAGCG,EAAMC,c,oBAIjB,WAAU,IAAD,OACCD,EAAUF,KAAKI,MAAfF,MACR,OACE,mCACE,sBAAKG,UAAU,QAAf,UACE,6BAAKH,EAAMI,UACX,8BAAG,yCAAH,IAAoBJ,EAAMK,QAAQC,SAClC,8BAAG,4CAAH,IAAuBN,EAAMO,MAAMC,YACnC,8BAAG,0CAAH,IAAqBR,EAAMS,YAC3B,mBAAGN,UAAU,cAAb,SAA4BL,KAAKY,KAAKV,KACtC,wBAAQG,UAAU,cAAcQ,QAAS,WAAO,EAAKd,SAASG,IAA9D,gC,GAlCUY,aCgBLC,E,4JAdX,WACI,IAAQC,EAAWhB,KAAKI,MAAhBY,OACR,OACI,oBAAIX,UAAU,YAAd,SACKW,EAAOC,KAAK,SAAAf,GAAK,OAClB,6BACI,cAAC,EAAD,CAAOA,MAAOA,KADRA,EAAMgB,a,GANRJ,aCsCTK,E,4MAtCbrB,MAAQ,CACNsB,MAAO,GACPC,YAAa,I,EAGfC,mBAAqB,SAACpB,GACpB,IAAMqB,EAAQrB,EAAMsB,OAAOD,MACrBF,EAAc,EAAKjB,MAAMqB,UAAUC,QAAO,SAACf,GAC/C,OAAOA,EAASgB,cAAcC,QAAQL,EAAMI,gBAAkB,KAEhE,EAAK1B,SAAS,CACZmB,MAAOG,EACPF,iB,4CAIJ,WACE,OACE,sBAAKhB,UAAU,aAAf,UACE,uBACEwB,KAAK,OACLxB,UAAU,OACVkB,MAAOvB,KAAKF,MAAMsB,MAClBU,SAAU9B,KAAKsB,qBAEjB,qBAAIjB,UAAU,cAAd,UACLL,KAAKF,MAAMuB,YAAYJ,KAAI,SAACc,GAAD,OAC1B,6BAAsBA,GAAbA,MAEX,6BACE,gDADM,iB,GA9BejB,a,OC4BVkB,MA5Bf,SAAwB5B,GACtB,MAA0C6B,mBAAS7B,EAAM8B,cAAzD,mBAAQA,EAAR,KAAsBC,EAAtB,KAaE,OACE,sBAAK9B,UAAU,iBAAf,UACE,uBAAO+B,QAAQ,SAAf,+BACE,uBACAP,KAAK,OACLX,GAAG,SACHK,MAAOW,EACPG,YAAY,gBACZP,SAnBa,SAAC5B,GAEjBA,EAAMsB,OAAOD,MACdY,EAAgBjC,EAAMsB,OAAOD,OAC7BnB,EAAMkC,eAAepC,EAAMsB,OAAOD,cCUzBgB,E,4JAZb,WACE,OACE,sBAAKlC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GANUS,aCME0B,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.5517ed61.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n\r\n\r\n  state = {\r\n    showMore: false\r\n  }\r\n\r\n  showMore(){\r\n    if(this.state.showMore === false) {\r\n      this.setState({showMore: true})\r\n    } else {\r\n      this.setState({showMore:false})\r\n    }\r\n  }\r\n\r\n  desc(event) {\r\n    if(this.state.showMore === false) {\r\n     return \"\"\r\n\r\n    } else {\r\n      return event.description;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { event } = this.props;\r\n    return (\r\n      <>\r\n        <div className=\"event\">\r\n          <h2>{event.summary}</h2>\r\n          <p><b>Creator:</b> {event.creator.email}</p>\r\n          <p><b>Start Time:</b> {event.start.dateTime}</p>\r\n          <p><b>Location:</b> {event.location}</p>\r\n          <p className=\"description\">{this.desc(event)}</p>\r\n          <button className=\"details-btn\" onClick={() => {this.showMore(event)}}>Show More</button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component { \r\n    render() {\r\n        const { events } = this.props;\r\n        return (\r\n            <ul className=\"EventList\">\r\n                {events.map (event => \r\n                <li key ={event.id}>\r\n                    <Event event={event} />\r\n                    </li>\r\n                    )}\r\n                </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: []\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n  {this.state.suggestions.map((suggestion) => (\r\n    <li key={suggestion}>{suggestion}</li>\r\n  ))}\r\n  <li key='all'>\r\n    <b>See all cities</b>\r\n  </li>\r\n</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { useState } from 'react';\r\n\r\nfunction NumberofEvents(props) {\r\n  const [ eventsToShow, setEventsToShow ] = useState(props.eventsToShow);\r\n\r\n  const handleChange = (event) => {\r\n\r\n    if(event.target.value !== 0) {\r\n      setEventsToShow(event.target.value);\r\n      props.updateEventNum(event.target.value);\r\n    } else {\r\n      setEventsToShow(event.target.value);\r\n      props.updateEventNum(event.target.value)\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div className=\"numberOfEvents\">\r\n        <label htmlFor=\"number\">Events per page: </label>\r\n          <input \r\n          type=\"text\" \r\n          id=\"number\" \r\n          value={eventsToShow}\r\n          placeholder=\"Type a number\" \r\n          onChange={handleChange} />\r\n       \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default NumberofEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberofEvents from './NumberofEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch />\n        <EventList />\n        <NumberofEvents />\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}